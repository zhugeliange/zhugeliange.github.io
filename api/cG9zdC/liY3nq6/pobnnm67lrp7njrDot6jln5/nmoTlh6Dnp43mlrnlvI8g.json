{"title":"前端项目实现跨域的几种方式","date":"2021-03-14T06:10:44.000Z","slug":"前端项目实现跨域的几种方式 ","comments":true,"tags":["跨域"],"categories":["前端"],"updated":"2021-04-23T02:24:15.000Z","content":"<html><head></head><body><p><strong><em>啥叫跨域请自行谷歌～</em></strong></p><h4 id=\"jsonp\"><a href=\"#jsonp\" class=\"headerlink\" title=\"jsonp\"></a>jsonp</h4><blockquote><p>原理大概就是，虽然图片这些静态资源不能跨域，但是js可以啊，于是就在目标页面回调本地页面的方法,并带入参数，这就实现了最简单的跨域。例如：jquery的ajax方法里就支持jsonp。</p></blockquote><figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.ajax({</span><br><span class=\"line\">    url: <span class=\"string\">\"http://localhost:8080/api/jsonp\"</span>,</span><br><span class=\"line\">    dataType: <span class=\"string\">\"jsonp\"</span>, <span class=\"comment\">// 选择jsonp类型</span></span><br><span class=\"line\">    type: <span class=\"string\">\"get\"</span>,</span><br><span class=\"line\">    data: {</span><br><span class=\"line\">        id: <span class=\"number\">1</span></span><br><span class=\"line\">    },</span><br><span class=\"line\">    jsonp: <span class=\"string\">\"cb\"</span>,</span><br><span class=\"line\">    success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>{</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">    }</span><br><span class=\"line\">});</span><br></pre></td></tr></tbody></table></figure><h4 id=\"直接在package-json文件里配置proxy\"><a href=\"#直接在package-json文件里配置proxy\" class=\"headerlink\" title=\"直接在package-json文件里配置proxy\"></a>直接在package-json文件里配置proxy</h4><blockquote><p>上面jsonp方式太老了，对于现代化的诸如react/vue这一类支持node,webpack的框架，可以直接在package-json文件里配置proxy的值，这个值就是你要跨域的目标地址。例如：</p></blockquote><figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"string\">\"proxy\"</span>: <span class=\"string\">\"http://localhost:8000\"</span>,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure><h4 id=\"通过http-proxy-middlware库\"><a href=\"#通过http-proxy-middlware库\" class=\"headerlink\" title=\"通过http-proxy-middlware库\"></a>通过http-proxy-middlware库</h4><blockquote><p>上面的package-json方式虽然很简单，但是不支持多个跨域，而且部署到生产环境也不稳定。还可以用npm装个<a href=\"https://www.npmjs.com/package/http-proxy-middleware\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">http-proxy-middlware</a>库，这是个专门用来代理url请求的中间件，很多框架实际上也都是基于这个库的（例如：蚂蚁的umi配置里的proxy选项）。示例：</p></blockquote><figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> express <span class=\"keyword\">from</span> <span class=\"string\">'express'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> { createProxyMiddleware, Filter, Options, RequestHandler } <span class=\"keyword\">from</span> <span class=\"string\">'http-proxy-middleware'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"string\">'/api'</span>, createProxyMiddleware({ <span class=\"attr\">target</span>: <span class=\"string\">'http://www.example.org'</span>, <span class=\"attr\">changeOrigin</span>: <span class=\"literal\">true</span> }));</span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>);</span><br></pre></td></tr></tbody></table></figure><h4 id=\"利用nginx的反向代理\"><a href=\"#利用nginx的反向代理\" class=\"headerlink\" title=\"利用nginx的反向代理\"></a>利用nginx的反向代理</h4><blockquote><p>nginx是啥？请自行谷歌～如果搞过php应该对这个很熟，例如本人。方案就是在您想的配置文件里面，配一个反向代理，将前端访问api的地址指向真正的后端api地址，例如：</p></blockquote><figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location /api/ # 一般以这种形式做api的标记，也可以自定义其他的</span><br><span class=\"line\">{</span><br><span class=\"line\">    proxy_pass http://api.xxx.com/; // 这个就是真实的后端目标api地址。</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure><p><strong>这几种方案怎么选型，按照我的经验来看，如果是jquery这种老项目，就用它封装好的jsonp方法就好了。如果是react这种新式的框架，本地开发直接在package-json里面配个proxy就行了，简单粗暴，线上生产环境如果后端是用的node技术栈（例如：express）可以用http-proxy-middlware，这是标准适配。其他的都可以选用最后一种nginx方式，这种配置也很简单，而且几乎没有任何限制，唯一要求的就是对nginx稍微有点了解吧。</strong></p></body></html>","prev":{"title":"ant-design知识点","slug":"ant-desgin知识点"},"next":{"title":"react-router知识点","slug":"react-router知识点"},"link":"/post/前端项目实现跨域的几种方式 /","reward":true,"copyright":{"license":"原创版权，转载请注明来源 (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow noopener\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)","author":"沈捷译","link":"<a href=\"/post/前端项目实现跨域的几种方式 /\" title=\"前端项目实现跨域的几种方式\">/post/前端项目实现跨域的几种方式 /</a>"}}